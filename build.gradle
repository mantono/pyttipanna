group = 'com.mantono'
version = '1.0.0'
description = 'description of project'

defaultTasks 'test'

buildscript {
    ext.kotlin_version = '1.3.0'
    ext.jvm_version = '1.8'
    ext.junit_platform_version = '1.2.0'

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.0"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
    }
}

apply plugin: 'org.jetbrains.dokka'
apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'idea'

sourceCompatibility = jvm_version

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
}

dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
    compile group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-jdk8', version: '1.0.0'
    compile group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: '1.0.0'
    implementation 'io.github.microutils:kotlin-logging:1.4.9'
    implementation "commons-codec:commons-codec:1.11"
    implementation "commons-codec:commons-codec:1.11:javadoc"
    runtime 'org.slf4j:slf4j-simple:1.7.21'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

test {
	useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = "$jvm_version"
    kotlinOptions {
        languageVersion = "1.3"
    }
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "$jvm_version"
}

dokka {
    outputFormat = 'html'
    outputDirectory = "doc"
    jdkVersion = 8
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
    inputs.dir 'src/main/kotlin'
}

task run(type: JavaExec) {
    main = 'com.mantono.pyttipanna.GeneratePasswordKt'
    classpath = sourceSets.main.runtimeClasspath
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jar {
    manifest {
        attributes 'Main-Class': 'com.mantono.pyttipanna.GeneratePasswordKt'
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.mantono.pyttipanna.GeneratePasswordKt'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

wrapper {
    description = 'Generates gradlew[.bat] scripts for faster execution'
    gradleVersion = '4.10.2'
}